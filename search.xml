<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用PyQt5实现带UI界面的简易ATM系统</title>
      <link href="/2021/07/24/atm/"/>
      <url>/2021/07/24/atm/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本项目仅作学习之用，不得用作其他用途。</p><p>项目地址：<a href="https://github.com/Er-Jia/PyQt5--ATM">https://github.com/Er-Jia/PyQt5--ATM</a></p><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>Win 10 专业版</p><p>python 3.8.5</p><p>pyQt5 </p><p>附<a href="https://blog.csdn.net/qq_32892383/article/details/108867482">pyqt5安装教程</a>在这里，非常详细，感谢大佬的无私分享</p><p>mysql 8.0</p><p>使用pymysql与数据库进行交互</p><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="1-分析系统实现的功能需求"><a href="#1-分析系统实现的功能需求" class="headerlink" title="1.分析系统实现的功能需求"></a>1.分析系统实现的功能需求</h3><h4 id="1-管理员界面"><a href="#1-管理员界面" class="headerlink" title="1.管理员界面"></a>1.管理员界面</h4><p>开户</p><p>开户包括用户信息输入(姓名，电话，身份证号码)和密码确认。</p><p>用户信息输入限制条件：选项填入不为空，电话和身份证不能超过一定长度，身份证下不能有已冻结的账号。</p><p>密码确认：给用户提供一个六位数字账号，用户输入密码并再次确定密码，密码不为空且只能是六位数字</p><p>解锁账户：</p><p>输入账户和身份证号解锁，判断输入是否符合规范</p><p>注销账户：</p><p>输入账户和密码注销账户，判断输入是否符合规范</p><p>登录：</p><p>输入账户和密码登录，判断输入是否符合规范，三次密码输错后账号冻结</p><h4 id="2-ATM界面"><a href="#2-ATM界面" class="headerlink" title="2.ATM界面"></a>2.ATM界面</h4><p>存款，取款，转账，查询，退卡(此处应有每个界面输入密码功能，但是时间仓促就没加)</p><p>存款包括选择金额存款和自定义金额存款</p><p>取款包括选择金额取款和自定义金额取款</p><p>自定义金额需要判断输入是否符合存取款条件</p><p>转账需判断对方账户状况并且判断数入金额是否符合转账条件</p><p>所有界面都可以跳转ATM界面或退卡</p><p>退卡界面会在显示10秒钟之后直接跳转到管理员界面</p><h4 id="3-与mysql进行交互"><a href="#3-与mysql进行交互" class="headerlink" title="3.与mysql进行交互"></a>3.与mysql进行交互</h4><p>所有增删改查操作都需要与数据库进行交互</p><h3 id="2-界面设计"><a href="#2-界面设计" class="headerlink" title="2.界面设计"></a>2.界面设计</h3><p><strong>使用Qtdesigner工具进行系统界面设计</strong></p><p>总共有13个界面</p><p>1.管理员界面   (manager.py)</p><p>2.用户信息输入界面   (signin.py)</p><p>3.账号输出和密码确认界面   (signin1.py)</p><p>4.解锁账户   (unlock.py)</p><p>5.注销账户   (signout.py)</p><p>6.登录   (login.py)</p><p>7.ATM界面   (atm.py)</p><p>8.存款   (deposit.py)</p><p>9.自定义金额存款   (deposit1.py)</p><p>10.取款   (cash.py)</p><p>11.自定义金额取款   (cash1.py)</p><p>12.转账   (transfer.py)</p><p>13.查询   (inquiry.py)</p><p>14.退卡   (card_out.py)</p><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p>系统数据库只有两张表</p><p>user表(姓名(name)，电话(tel)，身份证号(id))</p><p>card表(卡号(cno)，持卡人身份证(id)，密码(pwd)，账户余额(balance)，账户状态(status))</p><p>具体如下图：</p><img src="https://cdn.jsdelivr.net/gh/Er-Jia/PicGo@master/20210723005256.png" alt="image-20210723005255840" style="zoom:50%;"><h3 id="函数设计"><a href="#函数设计" class="headerlink" title="函数设计"></a>函数设计</h3><p>main.py</p><p>界面实例定义</p><p>界面之间跳转函数</p><p>各种功能实现函数（夹杂在界面跳转函数之内，使用func内的函数）</p><p>按键和函数连接</p><p>func.py</p><p>各种与数据库交互功能</p><p>包括各种增删改查操作</p><h2 id="系统运行截图"><a href="#系统运行截图" class="headerlink" title="系统运行截图"></a>系统运行截图</h2><p>管理界面</p><img src="https://cdn.jsdelivr.net/gh/Er-Jia/PicGo@master/20210723001721.png" alt="image-20210723001721864" style="zoom:50%;"><p>开户界面</p><img src="https://cdn.jsdelivr.net/gh/Er-Jia/PicGo@master/20210723001818.png" alt="image-20210723001818474" style="zoom:50%;"><p>登录界面</p><img src="https://cdn.jsdelivr.net/gh/Er-Jia/PicGo@master/20210723001857.png" alt="image-20210723001857440" style="zoom:50%;"><p>atm界面</p><img src="https://cdn.jsdelivr.net/gh/Er-Jia/PicGo@master/20210723002039.png" alt="image-20210723002039378" style="zoom:50%;"><p>取款界面</p><img src="https://cdn.jsdelivr.net/gh/Er-Jia/PicGo@master/20210723002108.png" alt="image-20210723002108261" style="zoom:50%;"><p>查询界面</p><img src="https://cdn.jsdelivr.net/gh/Er-Jia/PicGo@master/20210723004358.png" alt="image-20210723004358048" style="zoom:50%;"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>时间较为紧张，很多功能并未实现，细节方面也很粗略，估计也没有机会再去完善，暂且如此吧</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian 10安装transmission</title>
      <link href="/2021/05/18/transmission/"/>
      <url>/2021/05/18/transmission/</url>
      
        <content type="html"><![CDATA[<h2 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h2><h2 id="安装平台"><a href="#安装平台" class="headerlink" title="安装平台"></a>安装平台</h2><p>Debian10</p><h2 id="transmission安装"><a href="#transmission安装" class="headerlink" title="transmission安装"></a>transmission安装</h2><p>更新系统依赖</p><pre class=" language-shell"><code class="language-shell">apt update && apt upgrade</code></pre><p>在终端里输入以下命令安装</p><pre class=" language-shell"><code class="language-shell">sudo apt-get install transmission-daemon</code></pre><p>此命令安装过程中会顺带把transmission-cli也安装上，所以安装完毕后系统会多出如下一些命令行工具。</p><p>transmission-cli： 独立的命令行客户端。<br>transmission-create： 用来建立.torrent种子文件的命令行工具。<br>transmission-daemon： 后台守护程序。<br>transmission-edit： 用来修改.torrent种子文件的announce URL。<br>transmission-remote： 控制daemon的程序。<br>transmission-show：查看.torrent文件的信息。</p><h2 id="transmission配置"><a href="#transmission配置" class="headerlink" title="transmission配置"></a>transmission配置</h2><p>链接： <a href="https://github.com/transmission/transmission/wiki/Editing-Configuration-Files">英文官方配置说明</a>.</p><h3 id="查看transmission是否运行："><a href="#查看transmission是否运行：" class="headerlink" title="查看transmission是否运行："></a>查看transmission是否运行：</h3><pre class=" language-SHELL"><code class="language-SHELL">sudo service transmission-daemon status</code></pre><p>在更改配置前，必须使用下面命令将进程停止，否则不能更改。</p><pre class=" language-shell"><code class="language-shell">sudo service transmission-daemon stop</code></pre><p>配置文件在/etc/transmission-daemon/settings.json，可以用以下命令更改。</p><pre class=" language-shell"><code class="language-shell">sudo vi /etc/transmission-daemon/settings.json </code></pre><p>更改的内容有：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">“download-dir”</span><span class="token punctuation">:</span> “/mnt/sda6/bt<span class="token punctuation">-</span>download”<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#下载目录的绝对路径，根据自己的硬盘情况来设定</span><span class="token key atrule">“incomplete-dir”</span><span class="token punctuation">:</span> “/mnt/sda6/bt<span class="token punctuation">-</span>temp”<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#临时文件路径</span><span class="token key atrule">“rpc-authentication-required”</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#启用rpc验证</span>“rpc<span class="token punctuation">-</span>host<span class="token punctuation">-</span>whitelist”<span class="token punctuation">:</span>“localhost”<span class="token punctuation">,</span><span class="token comment" spellcheck="true">#这是主机名称白名单，比如localhost等。</span>“rpc<span class="token punctuation">-</span>host<span class="token punctuation">-</span>whitelist<span class="token punctuation">-</span>enabled”<span class="token punctuation">:</span><span class="token boolean important">true </span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#主机名白名单开启</span><span class="token key atrule">“rpc-bind-address”</span><span class="token punctuation">:</span> “0.0.0.0”<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#允许任何IP通过RPC协议访问</span><span class="token key atrule">“rpc-enabled”</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#允许通过RPC访问</span><span class="token key atrule">“rpc-password”</span><span class="token punctuation">:</span> “123456”<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#RPC验证密码（保存并启动后daemon会计算并替换为HASH值以增加安全性）</span><span class="token key atrule">“rpc-port”</span><span class="token punctuation">:</span> <span class="token number">9091</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#RPC端口</span><span class="token key atrule">“rpc-username”</span><span class="token punctuation">:</span> “user”<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#RPC验证用户名</span><span class="token key atrule">“rpc-whitelist”</span><span class="token punctuation">:</span> “*”<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#RPC访问ip地址白名单</span><span class="token key atrule">“rpc-whitelist-enabled”</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#RPC访问ip地址白名单功能开启</span></code></pre><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><p><strong>更改前关闭transmission-daemon进程。</strong></p><p>rpc-host-whitelist和rpc-whitelist的区别，一个是主机名，一个ip地址。</p><p>rpc-host-whitelist，域名，允许使用通配符，比如“*.baidu.com”，“*”，默认是“”。</p><p>rpc-whitelist，ip地址，允许使用通配符，比如：“127.0.0.<em>,192.168.</em>.<em>”, “127.0.0.1,192.168.</em>.*”默认是: “127.0.0.1”</p><p><strong>更改配置之后，需要重新启动transmission-daemon。</strong></p><pre class=" language-shell"><code class="language-shell">sudo service transmission-daemon start</code></pre><p>之后可以<strong>使用浏览器查看了浏览器输入：“ip地址:9091”</strong>。<br>出现用户名和密码，输入以上配置中的“rpc-username”和“rpc-password”就可以进行添加下载了。</p><h3 id="下载的一些设置："><a href="#下载的一些设置：" class="headerlink" title="下载的一些设置："></a>下载的一些设置：</h3><p>同样更改/etc/transmission-daemon/settings.json</p><p>“alt-speed-enabled”: false, 是否启用时段限速，默认关闭。其他alt开头的都是和这个有关，比如开始时间、结束时间、上行限速、下行限速。速度单位是KB/s 。如果是false后面的一些都不需要设置。<br>“cache-size-mb”: 4, 缓存大小，单位MB，建议设置内存大小的1/6~1/4<br>“dht-enabled”: false, 关闭DHT功能，启用DHT网络（通过tracker寻找节点），不少PT站的要求，但BT下载设置为true会使得下载更好。<br>“lpd-enabled”: false, 关闭LDP（本地节点发现，用于在本地网络寻找节点）<br>“peer-congestion-algorithm”: “”,这个与tweaking TCP’s Congestion Control Algorithm相关，默认就行。<br>“peer-id-ttl-hours”: 6,不懂<br>“peer-limit-global”: 200, 全局种子最大连接数，根据自己电脑能力确定<br>“peer-limit-per-torrent”: 50, 每个种子最多连接数<br>“pex-enabled”: true, 节点交换<br>“port-forwarding-enabled”: true, 启用端口转发（uPnP），如果路由支持并且也开启了uPnP，则路由会自动做端口映射<br>“preallocation”: 1, 预分配文件磁盘空间，0=关闭，1=快速，2=完全，默认取1，防止文件下载了一半后才发现磁盘空间不够，取2时耗时较多，但是可以减少磁盘碎片<br>“ratio-limit”: 2, 上传下载比例达到多少停止做种<br>“rename-partial-files”: true, 在未完成的文件名后添加后缀，默认true，incomplete-dir-enabled设置的路径带有.part后缀<br>“seed-queue-enabled”: false,<br>“seed-queue-size”: 10,<br>“speed-limit-down”: 100, 下载速度限制，默认100KB/s<br>“speed-limit-down-enabled”: false, 启用下载速度限制。默认关闭<br>“speed-limit-up”: 100, 上传速度限制，默认100KB/s<br>“speed-limit-up-enabled”: false, 启用上传速度限制。默认关闭<br>“start-added-torrents”: true, 添加种子文件后，自动开始，如果为false，添加种子后不会自动开始<br>“trash-original-torrent-files”: false, 是否删除监控目录添加的种子文件，也就是说在watch-dir监控的目录下添加种子文件后，任务开始后会自<br>动删除添加的种子文件<br>“umask”: 18, 文件权限的掩码，默认18即755权限，如果改成0是最高权限，下载回来的文件权限就是777<br>“upload-slots-per-torrent”: 14, 每个种子上传连接数<br>“utp-enabled”: true UTP传输是否启用<br>下面两个需要手动添加的选项，注意每行配置参数都是以逗号结尾，最后一行参数没有逗号<br>“watch-dir”: “/root/test”, 自动监控种子目录，将种子文件下载或放在此文件夹下，会自动开始下载文件<br>“watch-dir-enabled”: true 是否开启自动监控种子目录</p><h2 id="安装更方便好看的中文界面"><a href="#安装更方便好看的中文界面" class="headerlink" title="安装更方便好看的中文界面"></a>安装更方便好看的中文界面</h2><h3 id="如何安装（SSH方式）"><a href="#如何安装（SSH方式）" class="headerlink" title="如何安装（SSH方式）"></a>如何安装（SSH方式）</h3><ul><li>安装之前<ul><li>请确认系统已安装 Transmission；</li><li>请确认你是否有 root 用户权限；</li></ul></li></ul><h3 id="获取最新的安装脚本"><a href="#获取最新的安装脚本" class="headerlink" title="获取最新的安装脚本"></a>获取最新的安装脚本</h3><ul><li>使用终端以 <code>root</code> 用户登录到你的系统，以下脚本假设你已经使用 <code>root</code> 用户；（方法自行搜索）</li><li>记住当前路径（如 /volume1/ ），以后用到，因为 wget 下载的文件会保存到当前目录；</li><li>获取最新的安装脚本：</li></ul><pre><code>wget https://github.com/ronggang/transmission-web-control/raw/master/release/install-tr-control-cn.sh</code></pre><ul><li>国内用户可使用 <code>gitee</code> 镜像地址（下同）：</li></ul><pre><code>wget https://gitee.com/culturist/transmission-web-control/raw/master/release/install-tr-control-gitee.sh</code></pre><ul><li>请留意执行结果，如果出现 <code>install-tr-control-cn.sh.1</code> 之类的提示，表示文件已存在，请使用 <code>rm install-tr-control-cn.sh*</code> 删除之前的脚本再重新执行上面的命令；</li><li>如果提示 <code>https</code> 获取失败，请使用以下命令获取安装脚本：</li></ul><pre><code>wget https://github.com/ronggang/transmission-web-control/raw/master/release/install-tr-control-cn.sh --no-check-certificate</code></pre><ul><li>如果提示文件已存在，可以通过 <code>rm install-tr-control-cn.sh</code> 进行删除后再执行下载；或者在 <code>wget</code> 后面添加 <code>-N</code> 参数，如：</li></ul><pre><code>wget -N https://github.com/ronggang/transmission-web-control/raw/master/release/install-tr-control-cn.sh --no-check-certificate</code></pre><h3 id="执行安装脚本"><a href="#执行安装脚本" class="headerlink" title="执行安装脚本"></a>执行安装脚本</h3><ul><li>执行安装脚本（如果系统不支持 <code>bash</code> 命令，请尝试将 <code>bash</code> 改为 <code>sh</code> ）：</li></ul><pre><code>bash install-tr-control-cn.sh</code></pre><ul><li>如果出现 <code>Permission denied</code> 之类的提示，表示没有权限，可尝试添加执行权限：</li></ul><pre><code>chmod +x install-tr-control-cn.sh</code></pre><ul><li><p>如果命令成功执行，将出现以下界面：</p><p><img src="https://cdn.jsdelivr.net/gh/Er-jia/PicGo@master/20210809081718.png" alt="图1"></p></li><li><p>按照提示，输入相应的数字，按回车即可；</p></li><li><p>如果无法正常显示中文，请尝试设置SSH客户端编码为 <code>UTF-8</code> ，如依然不能显示中文，请下载并使用英文安装脚本 <code>install-tr-control.sh</code></p></li></ul><pre><code>wget https://github.com/ronggang/transmission-web-control/raw/master/release/install-tr-control.sh --no-check-certificate</code></pre><ul><li>安装完成后，用浏览器访问 Transmission Web Interface（如：<a href="http://192.168.1.1:9091/">http://192.168.1.1:9091/</a> ）即可看到新的界面；如果无法看到新界面，可能是浏览器缓存了，请按 <code>Ctrl + F5</code> 强制刷新页面或 <a href="https://jingyan.baidu.com/article/8065f87fc59f1723312498f1.html">清空缓存</a> 后再重新打开；</li><li>如果在知道自己的 Transmission Web 所在目录，也可以在安装脚本后面直接加路径，以避免搜索，如：</li></ul><pre><code>bash install-tr-control-cn.sh /usr/local/transmission/share/transmission</code></pre><ul><li>注意，路径最后 <strong><code>不要</code></strong> 加 <code>web</code> ；</li></ul><h3 id="如何更新"><a href="#如何更新" class="headerlink" title="如何更新"></a>如何更新</h3><ul><li><p>以下几种情况，需要更新 Transmission Web Control：</p><ul><li>Transmission 重新安装或升级之后；</li><li>Transmission Web Control 版本更新时；</li></ul></li><li><p>如何更新：</p><ul><li>如果之前已经下载过安装脚本，只需要在安装脚本所在目录执行一次脚本即可：</li></ul><pre><code> sudo bash install-tr-control-cn.sh    </code></pre><ul><li>如果没有下载过安装脚本，或脚本有更新时，请参考安装方式重新下载安装脚本执行安装即可。</li></ul></li></ul><h2 id="美化脚本官方网站"><a href="#美化脚本官方网站" class="headerlink" title="美化脚本官方网站"></a>美化脚本官方网站</h2><p>链接: <a href="https://github.com/ronggang/transmission-web-control/wiki/Linux-Installation-CN">transmission-web-control</a>.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决gitalk 403 问题</title>
      <link href="/2021/05/05/gitalk/"/>
      <url>/2021/05/05/gitalk/</url>
      
        <content type="html"><![CDATA[<h2 id="错误描述"><a href="#错误描述" class="headerlink" title="错误描述"></a>错误描述</h2><p>GitHub无法登录显示错误：</p><p>Error: Request failed with status code 403</p><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>点击 <strong><a href="https://cuiqingcai.com/30010.html">此处</a></strong> 查看大佬分析。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h4 id="先在配置文件-config-yml的gitalk配置项中加一个proxy："><a href="#先在配置文件-config-yml的gitalk配置项中加一个proxy：" class="headerlink" title="先在配置文件_config.yml的gitalk配置项中加一个proxy："></a>先在配置文件_config.yml的gitalk配置项中加一个proxy：</h4><pre class=" language-shell"><code class="language-shell">gitalk:   enable: true   clientID:    clientSecret:    accessToken:    repo: blog-comments   owner: Hanpeng-Chen   admin: ['Hanpeng-Chen']   perPage: 10   distractionFreeMode: true   language: zh-CN   proxy: https://netnr-proxy.cloudno.de/https://github.com/login/oauth/access_token</code></pre><h4 id="然后在gitalk-ejs中加上proxy配置："><a href="#然后在gitalk-ejs中加上proxy配置：" class="headerlink" title="然后在gitalk.ejs中加上proxy配置："></a>然后在gitalk.ejs中加上proxy配置：</h4><pre class=" language-shell"><code class="language-shell">let gitalk = new Gitalk({        clientID: '<%- theme.gitalk.oauth.clientId %>',        clientSecret: '<%- theme.gitalk.oauth.clientSecret %>',        repo: '<%- theme.gitalk.repo %>',        owner: '<%- theme.gitalk.owner %>',        admin: <%- JSON.stringify(theme.gitalk.admin) %>,        id: '<%- date(page.date, 'YYYY-MM-DDTHH-mm-ss') %>',        proxy: '<%= theme.gitalk.proxy %>',        distractionFreeMode: false  // Facebook-like distraction free mode    });</code></pre><h2 id="利用cloudflare-worker搭建在线代理"><a href="#利用cloudflare-worker搭建在线代理" class="headerlink" title="利用cloudflare worker搭建在线代理"></a>利用cloudflare worker搭建在线代理</h2><p>利用CloudFlare Worker创建在线代理，不需要我们有服务器，也不需要搭建Node.js服务，只需要注册一个CloudFlare账号，创建一个Worker，部署一个JS脚本就可以了，简单方便，下面我们就来看看如何创建吧。</p><p>首先你需要一个 CloudFlare 的账号，如果还没有的话就先注册一个吧：<a href="https://dash.cloudflare.com/">点我注册</a></p><p><strong>选择Workers，创建一个免费的Worker。</strong></p><img src="https://cdn.jsdelivr.net/gh/Er-Jia/PicGo@master/20210505105801.png" alt="img" style="zoom:50%;"><p><strong>自定义一个二级域名，然后创建worker。因为我之前有二级域名，所以这里是修改</strong></p><img src="https://cdn.jsdelivr.net/gh/Er-Jia/PicGo@master/20210505104106.png" alt="image-20210504234927031" style="zoom:50%;"><p><strong>进入github项目的 <a href="https://github.com/Hanpeng-Chen/cloudflare-cors-anywhere/blob/master/index.js">index.js</a>，复制代码。</strong></p><p><strong>清除脚本编辑器中的示例代码，将复制的代码粘贴进去。</strong></p><img src="https://cdn.jsdelivr.net/gh/Er-Jia/PicGo@master/20210505110428.png" alt="image-20210505110415205" style="zoom:50%;"><blockquote><p>这里有个点需要注意：我们可以设置请求的黑白名单，这里的白名单我只设置了自己博客域名，大家可以根据自己的情况修改，当然也可以设置为<code>whitelist = [ ".*" ]</code>，这样的话知道你代理地址的人都可以用了，然而免费版本的每天只有10万次请求，如果用的人多了很容易就用完了，所以还是建议大家设置 whitelist。</p></blockquote><pre class=" language-shell"><code class="language-shell">blacklist = [ ];           // regexp for blacklisted urls// whitelist = [ ".*" ];     // regexp for whitelisted originswhitelist = [ "^http.?://www.chenhanpeng.com$", "chenhanpeng.com$" ]   //将这里改成你的域名</code></pre><p>修改好之后，点击 保存并部署，如果部署正常的话，我们就可以使用我们创建的在线代理了。</p><p><strong>从右侧获取到你的worker域名</strong></p><img src="https://cdn.jsdelivr.net/gh/Er-Jia/PicGo@master/20210505110835.png" alt="image-20210505110830438" style="zoom:50%;"><p><strong>在上面提到的proxy配置项修改为如下代码：</strong></p><pre class=" language-shell"><code class="language-shell">proxy: https://此处为你复制的的链接/?https://github.com/login/oauth/access_token</code></pre><p>重新部署我们的博客，至此，个人在线代理就搭建成功了，博客的评论功能就能正常使用了。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>参考博客：<a href="https://www.chenhanpeng.com/create-own-cors-anywhere-to-resolve-the-request-with-403/">https://www.chenhanpeng.com/create-own-cors-anywhere-to-resolve-the-request-with-403/</a></p><p><strong>感谢大佬分享。</strong></p><h4 id="此篇文章仅代表个人观点，希望对你有所帮助。"><a href="#此篇文章仅代表个人观点，希望对你有所帮助。" class="headerlink" title="此篇文章仅代表个人观点，希望对你有所帮助。"></a>此篇文章仅代表个人观点，希望对你有所帮助。</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo静态博客搭建</title>
      <link href="/2021/05/03/blog/"/>
      <url>/2021/05/03/blog/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p><strong>本文仅为基础教程。</strong></p><p>建议所有<strong>配置文件修改使用专业编辑器</strong> 如vs code ;</p><h2 id="关于Hexo博客"><a href="#关于Hexo博客" class="headerlink" title="关于Hexo博客"></a>关于Hexo博客</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>注意<strong>Hexo为静态博客，文章需在本地发布</strong>，本人暂未找到在线发布方法。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h3><p><a href="https://nodejs.org/en/"><strong>node.js官网</strong></a></p><img src="https://cdn.jsdelivr.net/gh/Er-Jia/PicGo@master/20210505103635.jpg" style="zoom:50%;"><p><strong>打开后安装，无脑下一步，看到下图代表安装完成</strong></p><img src="https://cdn.jsdelivr.net/gh/Er-Jia/PicGo@master/20210505103627.jpg"><p><strong>检测是否安装成功</strong></p><p><strong>打开Windows命令行窗口(win+R)，输入cmd之后回车，输入以下命令检测</strong></p><pre class=" language-shell"><code class="language-shell">node -vnpm -v</code></pre><img src="https://cdn.jsdelivr.net/gh/Er-Jia/PicGo@master/20210505103622.jpg"><h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3><p><strong><a href="https://git-scm.com/">git官网</a></strong></p><img src="https://cdn.jsdelivr.net/gh/Er-Jia/PicGo@master/20210505103614.jpg" style="zoom:50%;"><p><strong>打开后安装，无脑下一步，看到下图代表安装完成</strong></p><img src="https://cdn.jsdelivr.net/gh/Er-Jia/PicGo@master/20210505103608.jpg" style="zoom:50%;"><p><strong>检测是否安装成功，桌面点击右键，出现下图即安装成功</strong></p><img src="https://cdn.jsdelivr.net/gh/Er-Jia/PicGo@master/20210505103603.jpg"><p><strong>打开Windows命令行窗口(win+R)，输入cmd之后回车，输入以下命令检测，出现下图则安装成功</strong></p><pre class=" language-shell"><code class="language-shell">gitgit --version</code></pre><img src="https://cdn.jsdelivr.net/gh/Er-Jia/PicGo@master/20210505103556.jpg" style="zoom:50%;"><img src="https://cdn.jsdelivr.net/gh/Er-Jia/PicGo@master/20210505103551.jpg" style="zoom:50%;"><h2 id="配置Git用户名和邮箱"><a href="#配置Git用户名和邮箱" class="headerlink" title="配置Git用户名和邮箱"></a>配置Git用户名和邮箱</h2><p>首先注册一个GitHub账号</p><p>然后在桌面点击鼠标右键，点击Git Bash Here</p><p>然后分别输入下面的两个命令，并回车：</p><pre class=" language-shell"><code class="language-shell">git config --global user.name "此处填写你注册时的用户名"git config --global user.email "此处填写你注册时的邮箱"</code></pre><p>然后找到.gitconfig文件，文件存放位置在 C:/Users/username/.gitconfig（ 未找到的话，请开启显示隐藏文件的功能），用编辑器打开，如看到你的用户名及邮箱，即则配置成功！</p><h2 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h2><p><strong><a href="https://hexo.io/zh-cn/">hexo官网</a></strong></p><p>1.在磁盘中新建一个文件夹，尽量英文命名(例myblog)，然后<strong>进入文件夹</strong>，点击右键，选择选择<code>Git Bash Here</code>，然后<strong>依次</strong>输入如下命令</p><pre class=" language-shell"><code class="language-shell">npm install hexo-cli -ghexo init blogcd blognpm installhexo ghexo s</code></pre><p>浏览器中打开<a href="http://locakhost:4000，可以看到一个网页，说明Hexo博客已经成功在本地运行。">http://locakhost:4000，可以看到一个网页，说明Hexo博客已经成功在本地运行。</a></p><img src="https://cdn.jsdelivr.net/gh/Er-Jia/PicGo@master/20210505103527.jpg"><h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><p>通过上面这些步骤我们只是在本地搭建起了博客，要让别人看到还需要把它部署到GitHub上。</p><p>首先在GitHub中新建一个Repository，接着在命名的时候需要注意，<strong>仓库的名字必须为：</strong></p><p><strong>你的用户名.github.io</strong>。</p><p>然后需要<strong>安装部署的插件</strong>，在本地博客目录下<code>git bash</code>执行下面的命令，也就是创建的博客目录下：</p><pre class=" language-shell"><code class="language-shell">npm install hexo-deployer-git --save</code></pre><p>紧接着，将本地目录与GitHub关联起来，输入下面的命令行：</p><pre class=" language-shell"><code class="language-shell">ssh-keygen -t rsa -C "你的邮箱地址"</code></pre><p>输入后一直回车，然后在<code>C:/Users/username</code>目录下找到名为.ssh的文件夹， 文件夹内会有两个文件，id_rsa.pub和id_rsa，</p><p>用文本编辑器<strong>打开id_rsa.pub</strong>，<strong>复制</strong>里面的的内容。 </p><p>然后打开Github，点击右上角的头像 <strong>Settings</strong> 选择<strong>SSH and GPG keys</strong></p><p>点击<strong>New SSH key</strong> <strong>将之前复制的内容粘帖到Key的框中</strong>。 上面的<strong>Title</strong>可以随意写，点击<strong>Add SSH key</strong> 完成添加。</p><p>然后回到Git的命令行界面，测试一下是否与GitHub连接成功。输入下面的命令行：</p><pre class=" language-shell"><code class="language-shell">ssh -T git@github.com</code></pre><p>点击回车，然后会出现一个询问内容，输入yes，回车，会出现一段内容，</p><p>Hi <account name="">! You’ve successfully authenticated, but GitHub doesnot provide shell access.。 </account></p><p>说明连接成功。此处这个<account name="">应该是你Github的用户名。</account></p><p>然后在本地博客目录底下打开_config.yml，这就是Hexo的配置文件。找到下面这段代码</p><pre><code>    # Deployment    ## Docs: http://hexo.io/docs/deployment.html    deploy:    type:</code></pre><p>把上面的内容替换成你刚才创建的Repository地址，如下:</p><pre><code>    # Deployment    ## Docs: http://hexo.io/docs/deployment.html    deploy:    type: github    repository: https://github.com/用户名/用户名.github.io.git    branch: master</code></pre><p>创建Repository并且修改配置文件之后，通过以下命令把我们的博客部署到GitHub上，过程中需要输入Git账号和密码:</p><pre><code>hexo deploy或hexo d</code></pre><p>至此Hexo博客基本部署完成，打开浏览器访问 http://用户名.github.io ，就可以看到博客效果了。</p><h2 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h2><p>通过修改_config.yml中相应的字段就可以进行博客的个性化定制。　　</p><h4 id="修改博客的标题以及作者"><a href="#修改博客的标题以及作者" class="headerlink" title="修改博客的标题以及作者"></a>修改博客的标题以及作者</h4><pre class=" language-shell"><code class="language-shell">title: 你的博客名subtitle: 博客的副标题，有些主题支持description: 博客描述keywords: 博客关键词author: 作者，在文章中显示language: 博客语言语种   timezone: 时区</code></pre><h4 id="修改博客的主题"><a href="#修改博客的主题" class="headerlink" title="修改博客的主题"></a>修改博客的主题</h4><p>在<a href="https://github.com/tommy351/hexo/wiki/Themes">此处</a>浏览Hexo主题，下载相应的主题后解压放到博客目录底下的themes文件夹底下。最后需要<strong>修改博客目录下_config.yml中theme字段的值为主题名称</strong>，如下:</p><pre class=" language-shell"><code class="language-shell">    # Extensions    ## Plugins: https://github.com/tommy351/hexo/wiki/Plugins    ## Themes: https://github.com/tommy351/hexo/wiki/Themes    theme: 主题名</code></pre><p>本博客主题为matery,详见<a href="http://blinkfox.com/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">官方文档</a>。如果需要个性化设置主题时，则需打开主题文件中的_config.yml文件进行配置。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li><p>本文仅为基本搭建教程。</p><p><strong>详细到极点的教程请点击<a href="https://blog.csdn.net/victoryxa/article/details/103733655#comments_13126469">此处</a>。</strong>同时也感谢大佬的分享。</p></li><li><p><strong>github页面国内有时访问速度较慢，亦可使用gitee搭建</strong></p><p><a href="https://blog.csdn.net/qq_46036214/article/details/110137239?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;spm=1001.2101.3001.4242"><strong>点击进入教程</strong></a>，再次感谢大佬的分享。</p></li></ul><p>  如果部署在gitee上，<strong>每次部署完后都需要登录gitee后更新pages后方可看到发布的文章</strong>，github就没有这个缺点。</p><p><strong>此篇文章仅代表个人观点，希望对你有所帮助。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四级备考方法及答题技巧</title>
      <link href="/2021/04/26/cet4/"/>
      <url>/2021/04/26/cet4/</url>
      
        <content type="html"><![CDATA[<h2 id="一、四级考卷的构成"><a href="#一、四级考卷的构成" class="headerlink" title="一、四级考卷的构成"></a>一、四级考卷的构成</h2><table class="table table-celled table-component" border="1" style="border-collapse: collapse; width: 100.13%;" id="tinymcetable"> <tbody>    <tr>    <td style="width: 16.5803%; text-align: center;">&nbsp;试卷结构</td>    <td style="width: 16.7098%; text-align: center;">测试内容&nbsp;</td>    <td style="width: 20.6059%; text-align: center;">测试题型&nbsp;</td>    <td style="width: 12.8137%; text-align: center;">题目数量&nbsp;</td>    <td style="width: 16.7098%; text-align: center;">分值比例&nbsp;</td>    <td style="width: 16.7098%; text-align: center;">时间控制&nbsp;</td>    </tr>    <tr>    <td style="width: 16.5803%; text-align: center;">&nbsp;写作</td>    <td style="width: 16.7098%; text-align: center;">&nbsp;写作</td>    <td style="width: 20.6059%; text-align: center;">&nbsp;短文写作</td>    <td style="width: 12.8137%; text-align: center;">&nbsp;1</td>    <td style="width: 16.7098%; text-align: center;">&nbsp;15%</td>    <td style="width: 16.7098%; text-align: center;">&nbsp;30分钟</td>    </tr>    <tr>    <td style="width: 16.5803%; text-align: center;" rowspan="3"><br><br>听力</td>    <td style="width: 16.7098%; text-align: center;">&nbsp;短片新闻</td>    <td style="width: 20.6059%; text-align: center;">&nbsp;选择题（单选题）</td>    <td style="width: 12.8137%; text-align: center;">7&nbsp;</td>    <td style="width: 16.7098%; text-align: center;">7%&nbsp;</td>    <td style="width: 16.7098%; text-align: center;" rowspan="3"><br><br>25分钟&nbsp;</td>    </tr>    <tr>    <td style="width: 16.7098%; text-align: center;">&nbsp;长对话</td>    <td style="width: 20.6059%; text-align: center;">&nbsp;选择题（单选题）</td>    <td style="width: 12.8137%; text-align: center;">&nbsp;8</td>    <td style="width: 16.7098%; text-align: center;">&nbsp;8%</td>    </tr>    <tr>    <td style="width: 16.7098%; text-align: center;">&nbsp;听力篇章</td>    <td style="width: 20.6059%; text-align: center;">&nbsp;选择题（单选题）</td>    <td style="width: 12.8137%; text-align: center;">&nbsp;10</td>    <td style="width: 16.7098%; text-align: center;">&nbsp;20%</td>    </tr>    <tr>    <td style="width: 16.5803%; text-align: center;" rowspan="3"><br><br>阅读理解&nbsp;</td>    <td style="width: 16.7098%; text-align: center;">选词填空&nbsp;</td>    <td style="width: 20.6059%; text-align: center;">选择题（单选题）&nbsp;</td>    <td style="width: 12.8137%; text-align: center;">10&nbsp;</td>    <td style="width: 16.7098%; text-align: center;">5%&nbsp;</td>    <td style="width: 16.7098%; text-align: center;" rowspan="3"><br><br>40分钟&nbsp;&nbsp;</td>    </tr>    <tr>    <td style="width: 16.7098%; text-align: center;">长篇阅读&nbsp;</td>    <td style="width: 20.6059%; text-align: center;">选择题（单选题）&nbsp;</td>    <td style="width: 12.8137%; text-align: center;">10&nbsp;</td>    <td style="width: 16.7098%; text-align: center;">10%&nbsp;</td>    </tr>    <tr>    <td style="width: 16.7098%; text-align: center;">仔细阅读&nbsp;</td>    <td style="width: 20.6059%; text-align: center;">选择题（单选题）&nbsp;</td>    <td style="width: 12.8137%; text-align: center;">10&nbsp;</td>    <td style="width: 16.7098%; text-align: center;">20%&nbsp;</td>    </tr>    <tr>    <td style="width: 16.5803%; text-align: center;">&nbsp;翻译</td>    <td style="width: 16.7098%; text-align: center;">汉译英&nbsp;</td>    <td style="width: 20.6059%; text-align: center;">段落翻译&nbsp;</td>    <td style="width: 12.8137%; text-align: center;">&nbsp;1</td>    <td style="width: 16.7098%; text-align: center;">15%&nbsp;</td>    <td style="width: 16.7098%; text-align: center;">30分钟&nbsp;&nbsp;</td>    </tr>    <tr>    <td style="width: 53.896%; text-align: center;" colspan="3">总计&nbsp;</td>    <td style="width: 12.8137%; text-align: center;">&nbsp;57</td>    <td style="width: 16.7098%; text-align: center;">100%&nbsp;</td>    <td style="width: 16.7098%; text-align: center;">125分钟&nbsp;&nbsp;</td>    </tr>    </tbody> </table><h2 id="二、时间充足时的备考方法"><a href="#二、时间充足时的备考方法" class="headerlink" title="二、时间充足时的备考方法"></a>二、时间充足时的备考方法</h2><p><strong>1.真题练习和摸底。</strong><br>买一套真题，并随机找一套往年的英语试题给自己摸底（<strong>目的是检测出自己的不足与优势</strong>）。<br><strong>一定要做真题</strong>，记住是真题，而且要反反复复把真题研究好几遍，看解析，总结题目的特点。<br>最好把真题中不认识的单词都找出来写在一个本子上，千万不要把真题做完就扔在一边。</p><p><strong>2.背单词和学习语法，单词是英语学习的基础.</strong><br>个人认为，只要你词汇量足够，过四级完全不是问题。<br>随便下一个单词软件，然后规定好每天可以接受的单词量，背起来就行了，最重要的是<strong>持之以恒</strong>。<br>背一段事件后再练之前错过的题，你会有一种豁然开朗的感觉。<br>语法学习可以买一本语法书。当然也可以看学习视频。重点是总结出自己的东西。</p><p><strong>3.听力练习.</strong><br>四级听力还是有难度的，而且分值很大，必须经常练习。相比较高中听力重播两边，大学四级听力只有一遍。<br>练习听力的时候先直接听一遍，<strong>对听不懂的地方多留意</strong> 。然后对照原文再听，将没听懂的地方找出来，不认识的单词标记出来，然后再听，直到确认没有听不懂的地方为止。<br><strong>听力的重点是把听不懂的地方搞懂</strong>，如果只是一味的听而不去对照原文找出不懂的地方，就是听的次数再多，下次遇到类似的句子，还是听不懂。</p><p><strong>4.阅读练习.</strong><br>四级最好拿分的是阅读，一定要反反复复研究阅读题，总结做题方法。<br>做的阅读越多，对英语文章了解越深，结果会越好。<br>做题的时候一定要把不认识的单词找出来记录，词汇量越多，做阅读越容易。<br>先练精确度，等到基本上能做到全对后。进行阅读速度练习。</p><p><strong>5.翻译题练习.</strong><br>需要注意语法和句式。多练习，积累高级句型和语法，积累词汇。<br>注意练习字体，文章一定要整洁，字体一定要清晰可辨。</p><p><strong>6.作文练习。</strong><br>想要作文拿高分，就一个字：背！背单词、背语法、背范文。如果你背了很多很多范文，作文一定能写的又快又好，翻译题也会跟着“沾光”。在平常阅读和背范文的同时，可以用一个小本子，把一些很精彩的句子抄下来，经常看看。用在自己的作文里。<br>注意练习字体，不需要多好看，但一定要整齐且看起来舒服。</p><h2 id="三、时间不充足时的备考方法"><a href="#三、时间不充足时的备考方法" class="headerlink" title="三、时间不充足时的备考方法"></a>三、时间不充足时的备考方法</h2><p><strong>1 随机找一套往年的英语试题给自己摸底。</strong><br>严格按照考试的时间和规则完成一套试题。摸底的目的就是为了曝露弱点，提高弱点。</p><p><strong>2. 听力</strong><br>听力是你的备考首位。在时间不足的情况下，可以只练往年真题听力，把音频放在手机里，有空就听，随时听。听不懂的看听力原文再听。<br>在此推荐<strong>每日英语听力</strong>这个软件。</p><p>真题的听力，最基本的要求是每套反复做三遍。基本上考试前把你买的那一套真题的听力搞熟练，四级听力就稳了。<br>听力是重点，千万不要吝啬在听力上做练习的时间。</p><p><strong>3. 阅读</strong><br>时间不足时阅读练习的方法是，尽可能的保证准确性，但如果用时超长，也没关系，重要的是完成阅读，保证正确率。把重点放在仔细阅读上。<br>每篇阅读都是先做，在文章中标出你认为答案出现的地方，再检查答案和解析，对照自己标记出的答案。<br>通篇读懂，把不懂的词汇和语法揪出来，查明白。这是一个很重要的积累单词的途径。<br>词汇量是阅读的关键因素。<br>但是在<strong>时间不足的情况下千万不要每天花费大量时间单独背单词!</strong><br>如果你觉得的词汇量还是不足，只要<strong>把往年真题中出现的陌生单词熟悉</strong>即可。</p><p><strong>4.作文</strong><br>这个时候就是个背！能背几篇背几篇，越多越好。尤其是你买的那一套真题里的作文。</p><p><strong>5.翻译</strong><br>做完真题里的翻译，尽量积累词汇和语法知识。</p><h2 id="四、做题时的技巧和时间掌握"><a href="#四、做题时的技巧和时间掌握" class="headerlink" title="四、做题时的技巧和时间掌握"></a>四、做题时的技巧和时间掌握</h2><h3 id="1-作文"><a href="#1-作文" class="headerlink" title="1.作文"></a>1.作文</h3><p>写作部分：<strong>106.5分</strong>，时间为<strong>30分钟</strong>。<br>写作文时一定要<strong>打草稿</strong>，也就是写出大纲，但是千万不要全写完再抄到答题卡上，时间可能会不够。<br>不要一味追求高级词汇和语法，<strong>准确表达意思是关键</strong>。千万不能出现明显的单词和语法错误。<br><strong>文章整洁</strong>很重要，字体要清晰可辨。尽量不要出现错误单词。</p><h3 id="2-听力"><a href="#2-听力" class="headerlink" title="2.听力"></a>2.听力</h3><p>听力部分： <strong>248.5分</strong>。时间为<strong>25分钟</strong>。</p><ul><li><strong>短篇新闻</strong> （共7小题，每小题7.1分）</li><li><strong>长对话</strong> （8个题目 每小题7.1分）</li><li><strong>听力篇章</strong> （共10个小题，每小题<strong>14.2分</strong>）</li></ul><p>听力的要点是，必须熟悉听力题型要求。因为听力开始之前不允许看听力题。<br>在播放题型要求的时候，你要快速浏览一下第一篇短篇新闻各个小题的选项，尽量猜一下文章内容和问题的大体要求。<br>一旦听力开始，马上停止看题，开始认真听，如果对选项没印象，就边看选项边注意听关键词，但是要把重点放在听上面，注意听力题的顺序基本和听力文章的顺序是一样的。<br>如果听完之后觉得根本不知道文章在说啥，就<strong>结合自己的直觉和听到的单词选，除非你觉得特别稳，要不然就听到啥选啥</strong>。<br><strong>千万不要犹豫不决</strong>，会影响你听下一个题。<br>充分利用每次念问题和念题型要求时的几秒钟时间，用来看下一道题和处理犹豫不决的题。<br><strong>最重要的是，直接涂在答题卡上，因为听力结束就会直接收卷。</strong></p><h3 id="3-阅读理解"><a href="#3-阅读理解" class="headerlink" title="3.阅读理解"></a>3.阅读理解</h3><p>阅读理解：<strong>248.5分</strong>。建议时间：<strong>40分钟</strong> 。</p><h4 id="选词填空"><a href="#选词填空" class="headerlink" title="选词填空"></a>选词填空</h4><p>选词填空：10个题，每小题<strong>3.55分</strong>。<br><strong>此部分建议最后做，因为分值最小</strong>，对词汇量和语法要求较高，<strong>难度较高</strong>。<br>做题的时候先浏览一遍方框内的词汇。然后看选项。<br>做题的时候注意语法知识与选项的联系，动词的ing形式，ed形式，名词单数和复数，动词原形，动词单三，副词，还有a/an，an一般后面是元音字母开头名词，等等。<br><strong>注意时间绝对不能超过十分钟，分值太小。</strong></p><h4 id="长阅读"><a href="#长阅读" class="headerlink" title="长阅读"></a>长阅读</h4><p>长篇阅读：10个题，每小题7.1分。<br>此篇<strong>重点为关键词</strong>，先迅速浏览题目划出关键词，然后逐段落阅读，边阅读边寻找相关关键词。<br>关键词一般为句子的主语和宾语。还要一些特殊的词汇。例如：interview，research，experiment。<br>虽然题目要求为可能会选择某一段落不止一次，但就我做的所有真题来说，基本上都是一段只选一次，<strong>所以找到答案后，马上进行下一段的阅读。</strong></p><p>注意，<strong>不要精读，略读找关键词即可</strong>。<br><strong>建议时间15分钟。</strong></p><h4 id="仔细阅读"><a href="#仔细阅读" class="headerlink" title="仔细阅读"></a>仔细阅读</h4><p>仔细阅读：10个题， 共2篇，每篇5个题，每小题<strong>14.2分</strong>。<br>同上一题，<strong>重点为关键词，先读题，找出题目关键词</strong>再阅读文章。<br>读题仅指读题目，不读选项。找到答案所在段落后，再结合文章选择意思最为相近的选项。<br>出题顺序基本为是文章顺序。<br>做完一题后，马上找下一题关键词，注意精读关键词所在段落。<br>建议时间：<strong>20分钟</strong>。每篇10分钟。</p><h3 id="4-翻译"><a href="#4-翻译" class="headerlink" title="4.翻译"></a>4.翻译</h3><p>汉译英 106.5分。</p><p>不要过度追求高级词汇和语法。<strong>准确表达意思</strong>是第一位。<br><strong>文章整洁</strong>很重要，字体要清晰可辨。尽量不要出现错误单词。<br>建议时间：<strong>25分钟</strong>。<br>注意，翻译用时越短，检查阅读就可以有更多时间。</p><h2 id="五、写在最后"><a href="#五、写在最后" class="headerlink" title="五、写在最后"></a>五、<strong>写在最后</strong></h2><h4 id="最最最重要的东西还是坚持。尽量多做题，多总结。"><a href="#最最最重要的东西还是坚持。尽量多做题，多总结。" class="headerlink" title="最最最重要的东西还是坚持。尽量多做题，多总结。"></a>最最最重要的东西还是坚持。尽量多做题，多总结。</h4><h4 id="祝大家考出满意成绩！"><a href="#祝大家考出满意成绩！" class="headerlink" title="祝大家考出满意成绩！"></a>祝大家考出满意成绩！</h4><p><strong>附本人四六级成绩：</strong></p><p><strong>四级：596</strong></p><p><strong>六级：596</strong></p><p>此篇文章仅代表个人观点，希望对你有所帮助。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CET-4    Skills </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>京都花见</title>
      <link href="/2021/04/14/huajian/"/>
      <url>/2021/04/14/huajian/</url>
      
        <content type="html"><![CDATA[<div class="ipage"> <div class="ititle">京都花见</div> <div class="izhengwen"> <p>都说樱花是不等人的。</p><p>都说今年花季是开得晚了一点。 反正，来到了京都，就遇见满城的樱花，触目有两种：白色和粉红色，在寻常人家的巷弄里，伸展出来，肆无忌惮地。</p><p>四月的京都穿着一什薄薄的外套，凉风习习，一吹，就乱了发，就把樱瓣吹入发，小小的一片像无物不上心的美感。 </p><p>日本人赏樱，喜欢花之盛开，更喜欢花之凋落。日本人拾起花瓣、流下眼泪，让自己淹没于悲剧的喜悦里。</p><p>有樱的地方往往有一块小木牌，牌上往往钉着许多小纸条，纸上写了俳句，短短几行字，说的不外是“谷间流水，石亦歌咏，樱花树下”或“尘世碌碌，樱花刹那，永恒思慕”之类的怜叹。若只是在报纸书本里读到，想必无动于衷，但在樱下读来，忽然每个字都变成有血有肉，立体地站起来，一阵风吹过，把它们吹走了，跟花瓣一同在风里起舞。寻常的事物，来到樱前，皆有感动。 </p><p>二十多年前，东京卷起过一阵年轻人自杀潮，有些死者在跳楼前留下一封遗书和一片花瓣，遗书写的就只是几行，大意是：让飞扬的飞扬，你先去吧，像樱花一样光凋谢才永生，我随后就来。 </p><p>日本人赏樱，叫做“花见”。 </p><p>花见，扩大解释是不仅见花也见人，花下见，花下相见，花下不能不相见。独自赏樱是会流泪的。</p><p>在京都清水寺，望见两个背影，沉默不语，静静地坐着、坐着，各对樱花想着事情。 这是他们第几回一起赏樱了?第一回，在何时、在何地?</p><p>下个花季，我再来这里等你，这是我们的花季，繁花盛放，我们的青春就在里面。说定了，不见不散。</p><p>站在京都的街头巷尾，想像着说着一口流利的日本语，于是有了日本男人的姿态，他应该比他们更易被触动，或是一口茶或是一个日本女性的鞠躬礼，他会宛若回到过去而重遇似曾相识恍如前世的种种交会，而不仅仅是以一个游客或异乡人。 </p><p>我说过，我知道为什么那些台湾文人明友那么喜欢京都了，那是你们美好童年的重现。 他们却道，不仅如此，京都比我们那年代的日本记忆更美好更优雅，是我们梦想里的童年而非仅是童年的再现。 </p><p>远处，站立于寺庙前的某个日本老男人的身影，那是陪他们来到这个比故乡更故乡的城市的父亲。以一种彼此都熟悉的姿态，等着我们。</p><p><a href="http://music.163.com/song?id=677091&amp;userid=1356666844"><strong>听听音乐</strong></a></p><p></p> </div> </div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 美文分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美文 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
